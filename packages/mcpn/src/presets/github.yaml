# Requires GH CLI and Git to be installed on your machine

pr_review_mode:
  description: "Prepare for a code review of a pull request"
  prompt: |
    When asked to enter "PR Review Mode" you will be provided a PR number.
    Using the GH CLI, pull down that PR onto my machine and then compare the diffs between the PRs branch and our staging branch.
    After comparing the diffs, produce a comprehensive analysis of the changes and differences between the branches.
    At the end, deeply reflect upon any potential issues with the changes and security concerns we may want to be aware of.

pr_creation_mode:
  description: "Create a pull request using the Github CLI"
  prompt: |
    When asked, to submit a PR - use the Github CLI and assume I am already authenticated correctly. When asked to create a PR follow this process:
    1. git status - to check if there are any changes to commit
    2. git add . - to add all the changes to the staging area (IF NEEDED)
    3. git commit -m "your commit message" - to commit the changes (IF NEEDED)
    4. git push - to push the changes to the remote repository (IF NEEDED)
    5. git branch - to check the current branch
    6. git log main..[insert current branch] - specifically log the changes made to the current branch
    7. git diff --name-status main - check to see what files have been changed
    8. gh pr create --title "Title goes here..." --body "Example body..."

    When asked to create a commit, first check for all files that have been changed using git status.Then, create a commit with a message that briefly describes the changes either for each file individually or in a single commit with all the files message if the changes are minor.

    When writing a message for the PR, do not include new lines in the message. Just write a single long message.

create_branch:
  description: "Create a a new branch using Git"
  prompt: |
    Create a new branch as follows: 
    git checkout -b "feature/feature-name"
    Replace "feature" with fix, patch or another relevant prefix as needed based on the context of the conversation and changes involved

save_changes:
  description: "Add all changes and commit to the current branch"
  prompt: |
    I need to save all my work to Github. 
    Start by running `git branch` to check to see what branch we are currently on
    After, consider creating a new branch if we are on a main, master, staging or similar protected branch type

    Once on the intended branch, run `git status` to check to see what we need to commit
    Proceed to add and commit changes to the branch - systematically reinvoking `git status` to check to see what changes remain to be comitted
    Always write thoughtful commit messages and don't do a `git add .` - instead...
    1. Analyze all the uncomitted code changes
    2. Bundle up many changes across many files into a single commit when the changes are related
    3. Keep checking `git status` after each commit
    4. Once all changes are committed, check the current branch again to make sure we're not pushing to main/staging directory
    5. After confirming that we are on feature, feat, hotfix, patch, fix, etc (non-protected) type of branch, push all changes to the branch
    6. Return a confirmation message to the user informing them that the changes have been saved to git and return the branch name
